import Head from "next/head";
import { GetStaticProps } from 'next';

import { getCourses } from "../../../../lib/getCourses";
import { getLessons } from "../../../../lib/getLessons";
import { getLesson, LessonFileContentWithJSX } from "../../../../lib/getLesson";

import { serialize } from 'next-mdx-remote/serialize';
import { MDXRemote } from 'next-mdx-remote';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';

import GeneralContainer from "../../../../components/ui/generalContainer/generalContainer";

import Typography from "@mui/material/Typography";

interface Lesson {
    course_id: string
    lessonFileContent: LessonFileContentWithJSX,
    contentJSXComplied: any
}

const components = { 
    h1: (props: any) => <Typography variant="h3" component="div" gutterBottom {...props} />
};

export default function Lesson(props: Lesson) {

    return <>
        <Head>
            <title>{props?.course_id} - {props?.lessonFileContent.lesson_id}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <GeneralContainer>
            <MDXRemote {...props.contentJSXComplied} components={components} />
        </GeneralContainer>
    </>
}


export const getStaticProps: GetStaticProps = async (context) => {

    const course_id = context.params?.course as string;
    const lesson_id = context.params?.lesson as string;

    let lessonFileContent = getLesson('en', course_id, lesson_id);

    const contentJSXComplied = await serialize(
        lessonFileContent?.contentJSX as string, 
        {
            scope: {},
            mdxOptions: {
              remarkPlugins: [remarkMath],
              rehypePlugins: [rehypeKatex],
              format: 'mdx'
            },
            parseFrontmatter: false,
        }
    );

    return {
        props: {
            course_id,
            lessonFileContent,
            contentJSXComplied
        },
    };
}

export const getStaticPaths = async () => {

    const courses = getCourses('en');

    interface Path {
        params: { course: string; lesson: string; }
    }

    const paths: Path[] = [];
  
    courses.forEach((course) => {
    
        getLessons('en', course.course_id).forEach((lesson) => {

            return paths.push({ params: { course: course.course_id, lesson: lesson.lesson_id } });

        })

    })
  
    return { paths, fallback: false }
}